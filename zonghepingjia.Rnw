\documentclass{article}
\usepackage{CJKutf8}
%\DeclareUnicodeCharacter{0020}{~}
%\setCJKmainfont{KaiTi}
\usepackage{amsfonts}
\usepackage[%dvipdfm,  
            %pdflatex,
            %pdftex,%这里决定运行文件的方式不同
            pdfstartview=FitH,
            unicode = true,
            %CJKbookmarks=true,
            bookmarksnumbered=true,
            bookmarksopen=true,
            colorlinks, %注释掉此项则交叉引用为彩色边框(将colorlinks和pdfborder同时注释掉)
            pdfborder=001,   %注释掉此项则交叉引用为彩色边框
            linkcolor=green,
            anchorcolor=green,
            citecolor=green
            ]{hyperref}  
\usepackage{amsmath}
\usepackage{amssymb}
\usepackage{graphicx}
\title{股票市场的预测——基于标准普尔指数}
\author{徐国盛}
\begin{document}
\begin{CJK*}{UTF8}{gkai}
\maketitle
\tableofcontents
\section{写在前面}

\textbullet 本文中的主要介绍一个数据分析的流程，文中的模型在实际中应用的价值不大（潜台词是别拿这玩意儿去捣鼓股票，尤其时在天朝，不然，你懂得。。。想玩股票的话，去16幢305找你们滴\textbf{刘伟}师兄，刘伟师兄可爱可爱为师弟师妹提供帮助了$\smallfrown\_\_\smallfrown$）。

\textbullet 本文是在上学期综合评价作业基础上进行了修改，这个例子来自于\textit{Data Mining with cases study}这本书（应该是这个名字$>\_\_<$!）。

\textbullet 本文给出了程序运行结果，但没有给出详细的程序代码（代码太长，相信大家也不愿看到一群英文字母带着七大姑八大姨开大会$\wedge\_\_\wedge$!!）。在\url{http://rpubs.com/appsoner/zonghepingjia}中，提供了本文中相关的所有的代码，并且配有相应的运算结果。如果对代码感兴趣，想运行相关代码，可直接在网页上复制代码然后粘贴运行。

\textbullet 本文模拟基于ubuntu系统13.04 LTS, 酷睿双核，主频2.34GHZ，4G内存（写上这句纯属为了显的高端大气点儿，请自行略过）

\textbullet 本文就讲了一件事，根据以往的数据计算一个指标，根据这个指标决定买入和卖出（有了这句话，摘要就成了打酱油的了$\sim>=<\sim$。下面开启装逼模式$\circledcirc\vartriangle\circledcirc$，进入正题。）
\section{摘要}

标准普尔指数是典型的时间序列，对时间序列的处理有许多成熟的方法。但在这里本文不采用时间序列的方法。而是通过确立一个指标进行相关的买入卖出的决策，并通过模拟选择出稳定模型，用选择出的模型进行交易，并通过相关统计量评价加以交易表现。本文旨在方法过程的描述,对应用的相关模型的参数设置尽量最简化。
<<loadPackage, message=FALSE, echo=FALSE>>=
opts_chunk$set(fig.height = 5, echo = FALSE, fig.align = 'center',
               warning = FALSE, message = FALSE, eval = T)
@
<<load_some_packages>>=
library(DMwR)
library(quantmod)
@
<<getSymbols, message=FALSE>>=
getSymbols("^GSPC",from = "1970-01-01", to = "2009-09-15")
colnames(GSPC) <- c("Open", "High", "Low", "Close", "Volume", "Adjusted")
@
\section{建立决策指标}

我们假设在接下来的~$k$~天里，如果标准普尔指数的报价变动超过~$p\%A$~，我们就会进行相应的交易（买入或卖出）。因此建立一个决策指标，它能够描述标准普尔指数在接下来~$k$~天内的趋势。当报价变动为正数，我们将买入，反之，我们将卖出。由此，我们建立的这个指标为正，说明报价将有上升的趋势，反之，报价将有下降的趋势。这里，定义日平均报价为
$$\overline{P}_i = \frac{C_i+H_i+L_i}{3}$$
其中~$C_i$~是当天的收盘价，~$H_i$~是日最高价，~$L_i$~是日最低价。
定义集合~$V_i$~，这个集合中包括的~$k$~个值为当天收盘价相对于接下来~$K$~天均价的变动半分比，定义如下
$$V_i = \left\{\frac{\overline{P}_{i+j}-C_i}{C_i}\right\}_{j=1}^k$$
我们选出集合中的~$k$~个值的绝对值大于~$p\%$~的值，对其求得的和作为我们的指示变量。
如下
$$T_i = \sum_v\{v\in V_i:v>p\%\cup v<-p\%\}$$
指示变量~$T$~意味着当其值为较大的正直时,表明多个日均值超过收盘价~$p\%$~,这是一个很好的买入信号。反之，则是一个卖出信号。

现在我们知道指示变量~$T$~是接下来~$k$~天的价格变动趋势的反应。我们的任务是预测这种行为。我们假设通过观察过去的市场行为信息，我们可以预测将来的市场价格走势。进一步讲，过去的某种行为~$p$~发生后，行为~$f$~紧跟着发生，并且这种
模式频繁发生，那么将来行为~$p$~发生时，我们可以预测~$f$~将紧接着发生。因此，我们将通过~$T$~来预测的将来的行为~$f$~。接下来我们要做的是如何描述最近的价格行为~$p$~,在这里，我们将用很多特征因子描述现在的行为~$p$~，然后通过p去预测~$T$~，进而预测将来的行为~$f$~,。

我们将注重分析收盘价，以为我们的交易决定将在每天交易结束后做出。初始的特征因子集合由多个过去基于收盘价的收益率组成。即
$$R_{i-h} = \frac{C_i-C_{i-h}}{C_{i-h}}$$
其中~$C_i$~是第~$i$~天的收盘价。我们选则~$h = 1,\dots,10$~，这样初始的特征因子集合就有~$10$~个特征因子。此外，也采用了许多技术指标作为特征因子，有平均波动因子(ATR，反应序列的波动性)；随机动量指数(SMI,是一个动量指标)；Wells Wilder’s方向性移动指数(ADX);Aroon 指标，用于确定序列开始趋势；Bollinger Bands， 用于比较一段时期内的波动性；Chaikin 波动；Close Location Value，将
收盘价与交易区间结合起来；Arms Ease of Movement Value；MACD振子；货币流通指数(MFI);Parabolic Stop and Reverse 以及波动指示变量。

以上这些特征因子用来预测~$T$~的将来值。
$$T = f(ATR,SMI,ADX,Aroon,BB,ChaikinVol,CLV,EMV,MACD,MFI,Volat)$$
其中~$f(\bullet)$是线性函数
\section{随机森林}
在机器学习中，随机森林是一个包含多个决策树的分类器， 并且其输出的类别是由个别树输出的类别的众数而定。 

根据下列算法而建造每棵树：

1. 用 ~$N$~ 来表示训练例子的个数，~$M$~表示变量的数目。

2. 我们会被告知一个数 ~$m$~ ，被用来决定当在一个节点上做决定时，会使用到多少个变量。~$m$~应小于~$M$~。

3. 从N个训练案例中以可重复取样的方式，取样~$N$~次，形成一组训练集（即bootstrap取样）。并使用这棵树来对剩余预测其类别，并评估其误差。

4. 对于每一个节点，随机选择~$m$~个基于此点上的变量。根据这~$m$~个变量，计算其最佳的分割方式。

5. 每棵树都会完整成长而不会剪枝（Pruning）（这有可能在建完一棵正常树状分类器后会被采用）。

\section{神经网络}
神经网络对预测问题中的变量值的大小是敏感的。因此，在用神经网络处理数据之前，对相应的数据进行预处理是十分有效的。在这里， 我们将对数据进行标准化，使其均值为~$0$~，方差为~$1$~。即用如下公式对数据进行处理。
$$y_i = \frac{x_i - \overline{x}}{\sigma_x}$$。

我们将采用向前的(feed-forward)神经网络，并且只有一层隐藏层。如下图：
\begin{figure}[ht]
\centering
\includegraphics[width = 12cm]{./art.jpeg}
\caption{神经网络}\label{fig2.1}
\end{figure}
\section{支持向量机}
支持向量机可以用于解决回归和分类问题。由于支持向量机有很强的理论基础，因此被广泛应用。


向量机的基本思想是将原有数据映射到一个新的高唯空间，在这个高位空间里可以应用一个线性模型得到一个超平面用于分离数据，比如数据的分类问题。运用核函数将原来数据映射到高维空间。SVM是个基于核函数的线性分类器。

如果向量机将数据分为两类，那么通过最大化属于不同类别个体的分离边界，基于可以得到一个用于分类的超平面。有一种软边界的方法(soft method)允许对某些个体判断错误，当然，这需要一个量来限制，这就是损失(cost)。如下图
\begin{figure}[ht]
\centering
\includegraphics[width = 12cm]{./svm.jpeg}
\caption{支持向量机}
\end{figure}

对于向量机回归问题，过程与向量机分类问题是类似的。主要的不同在于误差的形式和损失的计算。这依赖于~$\epsilon-insenstive$~损失函数~$|\xi|_\epsilon$。如下：
\begin{equation*}
|\xi|_\epsilon = \left\{\begin{array}{ll}
0 & \text{if} |\xi| \leq \epsilon\\
|\xi|-\epsilon &\text{otherwise}
\end{array}\right.
\end{equation*}
\section{多元自适应样条法(Multivariate Adaptive Regression Splines)}

MARS 一般模型的形式如下：
$$mars(\mathbf{x}) = c_0 + \sum_{i=1}^kc_iB_i(\mathbf{x})$$
其中 ~$c_i$~ 是常数， ~$B_i$是基函数。
最常用的函数是 \textit{hinge} 函数，有如下形式：
$$H[-(x_i - t)] = max(0, t - x_i) \quad H[+(x_i - t)] = max(0, x_i - t)$$
其中 ~$x_i$~是写变量，  ~$t$~是一个阈值.下图为此函数一个例子的函数图像:
\begin{figure}[ht]
\centering
\includegraphics[width = 12cm]{./mar.jpeg}
\caption{hing函数的例子}\label{fig4.1}
\end{figure}
\section{蒙特卡罗模拟}
我们将针对相应的模型在交易区间进行蒙特卡罗模拟，我们用三种方法针对训练模型：

\textbullet 针对测试集采用单一模型

\textbullet 采用一个增长的训练集，对日期采取一个增长窗口,每当预测~$w$~天就在训练集增加~$w$~天的数据，重新训练模型，进行预测。

\textbullet 采用一个移动的训练集合，对日期采取一个移动的窗口，每当增加~$w$~天的预测，就移动窗口，移除日期最前面的陈旧的~$w$~天数据，增加~$w$~天新数据，重新训练模型，进行预测。

其三种方法可以由下图表示
\begin{figure}[ht]
\centering
\includegraphics[width = 12cm]{./method.jpeg}
\caption{交易策略}
\end{figure}
\section{交易策略}
我们的交易系统分为多头和空头。对于长期，我们在时间~$t$~以价格~$p$~买入，并且在之后的时间~$t+x$~卖出。如果股价在将来一段时间会上升，那么就是有意义的，有盈利的可能。对于空头,将在时间~$t$~以价格~$p$~卖出，并且在将来买入。因此，我们可以认为，当价格预期上涨是，执行多头；预期下降是，进行空头。

我们将执行以下交易策略。

对于空头交易。我们将在每天交易时间结束是作出相关买入卖出决定，因为我们知道了当天的交易价格。比如在第~$t$~天，模型显示价格将下跌，也就是说，我们计算得到的~$T$~值较低，这是一个卖出信号。如果已经有了一个合同，那么模型提供的卖出信号将被忽略。如果没有合同，我们将进行一个空头交易，进行卖出。卖出命令在将来以价格~$pr$~成交。接下来，我们将进行两种操作。

\textbullet 获益买入限定。当价格为~$pr-p\%$~时，进行买入。~$p\%$~是目标利润。这一操作只有在价格达到目标价格才会执行。这一命令确定了对于刚才的空头交易，我们的目标利率。我们有10天来确定是否达到利率标准。如果在10天之后仍旧没有达到目标利率，那么，我们加以第10天的收盘价买入结束空头。

\textbullet 定损买入限定。如果价格不降反升，当价格达到~$pr+l\%$~，我们将进行买入，最终将我们的损失限制在~$l\%$~。

对于多头交易.如过模型显示价格会在寄来一段时间上升，我们将来时间~$t$~以价格~$p$~买入股票。接下来，我们将执行以下两种操作。

\textbullet 获益卖出限定。在接下来的10天里，如果价格达到或超过~$pr+p\%$~，将执行卖出操作。否则将以第10天的收盘价卖出。

\textbullet 定损卖出限定。如果在接下来的10天，价格不升反降。当价格价格降低到~$pr-l\%$~时，将被执行卖出操作
\section{实例分析}
我们这里使用的是~$1990-01-01$~到~$2009-09-15$~的标准普耳指数作为分析数据。数据来是yhaoo网站，通过网络抓取获得。
\subsection{绘制波动图，构造指标变量~$T.ind$~}
我们绘制标准普耳指数的波动图标，同时，将我们构造的指标变量绘制到图中，位于图像下部，可以但到当~$T.ind$~较大时，未来价格会有上升趋势。反之，会有下降趋势。
<<T.ind>>=
T.ind <- function(quotes, tgt.margin = 0.025, n.days = 10){
  v <- apply(HLC(quotes), 1, mean)
  r <- matrix(NA, ncol = n.days, nrow = NROW(quotes))
  for(x in 1:n.days) r[ ,x] <- Next(Delt(HLC(quotes)[ ,1],v, k = x), x)
  x <- apply(r, 1, function(x) sum(x[x > tgt.margin|x < -tgt.margin]))
  if(is.xts(quotes))
    xts(x, time(quotes))
  else x
}
@

<<practice, warning=FALSE, fig.height=4>>=
candleChart(last(GSPC, "3 month"), theme = "white", TA = NULL)
avgPrice <- function(p) apply(HLC(p), 1, mean)
addAvgPrice <- newTA(FUN = avgPrice, col = 1, legend = "AvgPrice")
addT.ind <- newTA(FUN = T.ind, col = "red", legend = "tgtRet")
addAvgPrice(on = 1)
addT.ind()
@
<<indicator>>=
 myATR <- function(x) ATR(HLC(x))[, "atr"]
 mySMI <- function(x) SMI(HLC(x))[, "SMI"]
 myADX <- function(x) ADX(HLC(x))[, "ADX"]
 myAroon <- function(x) aroon(x[, c("High", "Low")])$oscillator
 myBB <- function(x) BBands(HLC(x))[, "pctB"]
 myChaikinVol <- function(x) Delt(chaikinVolatility(x[, c("High",
 "Low")]))[, 1]
 myCLV <- function(x) EMA(CLV(HLC(x)))[, 1]
 myEMV <- function(x) EMV(x[, c("High", "Low")], x[, "Volume"])[,
 2]
 myMACD <- function(x) MACD(Cl(x))[, 2]
 myMFI <- function(x) MFI(x[, c("High", "Low", "Close")],
 x[, "Volume"])
 mySAR <- function(x) SAR(x[, c("High", "Close")])[, 1]
 myVolat <- function(x) volatility(OHLC(x), calc = "garman")[,
 1]
@
\subsection{通过随机森林选出影响显著的特征因子}
<<build_randomForest>>=
 data(GSPC)
 library(randomForest)
 data.model <- specifyModel(T.ind(GSPC) ~ Delt(Cl(GSPC), k=1:10) +
 myATR(GSPC) + mySMI(GSPC) + myADX(GSPC) + myAroon(GSPC) +
 myBB(GSPC) + myChaikinVol(GSPC) + myCLV(GSPC) +
 CMO(Cl(GSPC)) + EMA(Delt(Cl(GSPC))) + myEMV(GSPC) +
 myVolat(GSPC) + myMACD(GSPC) + myMFI(GSPC) + RSI(Cl(GSPC)) +
 mySAR(GSPC) + runMean(Cl(GSPC)) + runSD(Cl(GSPC)))
 set.seed(1234)
 rf <- buildModel(data.model,method='randomForest',
 training.per=c(start(GSPC),index(GSPC["1999-12-31"])),
 ntree=50, importance=T)
@
<<model_data>>=
ex.model <- specifyModel(T.ind(IBM) ~ Delt(Cl(IBM), k= 1:3))
data <- modelData(ex.model, data.window = (c("2009-01-01", "2009-08-10")))
#m <- myFavouriteModellingTool(ex.model@model.formula,
#as.data.frame(data))
@

我们通过逐个去除变量，通过其导致的误差大小来表示其重要性。去除变量因子后，误差越大，重要性也就越高。
<<check_improtance, fig.height = 9>>=
varImpPlot(rf@fitted.model, type = 1)
@

我们将选取重要性大于10的因子。
<<seclect_variable>>=
imp <- importance(rf@fitted.model, type = 1)
rownames(imp)[which(imp > 10)]
@
因此，我们得到的~$T.ind$~模型为
<<obtain_model, echo=TRUE>>=
data.model <- specifyModel(T.ind(GSPC) ~ Delt(Cl(GSPC), k = 1) + 
                             myATR(GSPC) + myADX(GSPC) + myEMV(GSPC)
                           + myVolat(GSPC) + myMACD(GSPC) + mySAR(GSPC)
                           + runMean(Cl(GSPC)))
@

<<Tdata>>=
Tdata.train <- as.data.frame(modelData(data.model, data.window = 
                                         c('1970-01-01','1999-12-31')))
Tdata.eval <- na.omit(as.data.frame(modelData(data.model,
                                               c('2000-01-01',
                                                 '2009-09-15'))))
Tform <- as.formula('T.ind.GSPC ~ .')
@

在这里，我们规定~$1970$~到~$1999$~年的数据作为训练集合，以后的数据用于最终测试

\subsection{训练模型，进行预测}
\subsubsection{神经网络的测试结果}
回归测试结果
<<an_example_nnet>>=
set.seed(1234)
library(nnet)
norm.data <- scale(Tdata.train)
nn <- nnet(Tform, norm.data[1:1000, ], size = 10, decay = 0.01,
           maxit = 1000, linout = T, trace = F)
norm.preds <- predict(nn, norm.data[1001:2000, ])
preds <- unscale(norm.preds, norm.data)
sigs.nn <- trading.signals(preds, 0.1, -0.1)
true.sigs <- trading.signals(Tdata.train[1001:2000, "T.ind.GSPC"],
                             0.1, -0.1)
sigs.PR(sigs.nn, true.sigs)
@

分类测试结果
<<ANNs_classification>>=
set.seed(1234)
signals  <- trading.signals(Tdata.train[ , "T.ind.GSPC"], 0.1, -0.1)
norm.data <- data.frame(signals = signals, scale(Tdata.train[ , -1]))

nn <- nnet(signals ~ ., norm.data[1:1000, ], size = 10, decay = 0.01, 
           maxit = 1000, trace = F)
preds <- predict(nn, norm.data[1001:2000, ], type = "class")
sigs.PR(preds, norm.data[1001:2000, 1])
@
\subsubsection{支持向量机的测试结果}
回归测试结果
<<svm_regression, message=FALSE>>=
library(e1071)
sv <- svm(Tform, Tdata.train[1:1000, ], gamma = 0.001, cost = 100)
s.preds <- predict(sv, Tdata.train[1001:2000, ])
sigs.svm <- trading.signals(s.preds, 0.1, -0.1)
true.sigs <- trading.signals(Tdata.train[1001:2000, "T.ind.GSPC"],
                             0.1, -0.1)
sigs.PR(sigs.svm, true.sigs)
@

分类测试结果
<<svm_classification, message=FALSE>>=
library(kernlab)
data <- cbind(signals = signals, Tdata.train[ , -1])
ksv <- ksvm(signals ~ ., data[1:1000, ], C = 10)
ks.preds <- predict(ksv, data[1001:2000, -1])
sigs.PR(ks.preds, data[1001:2000, 1])
@
\subsubsection{多元自适应样条测试结果}
多元自适应样条只是用于回归预测分析
<<MARS_regression, message=FALSE>>=
library(earth)
e <- earth(Tform, Tdata.train[1:1000, ])
e.preds <- predict(e, Tdata.train[1001:2000, ])
sigs.e <- trading.signals(e.preds, 0.1, -0.1)
true.sigs <- trading.signals(Tdata.train[1001:2000, "T.ind.GSPC"], 
                             0.1, -0.1)
sigs.PR(sigs.e, true.sigs)
@
\subsection{构建策略函数}
见代码
<<police_1>>=
policy.1 <- function(signals, market, opened.pos, money,
                     bet = 0.2, hold.time = 10, 
                     exp.prof = 0.025, max.loss = 0.05)
{
  d <- NROW(market) # this is the ID of today
  orders <- NULL
  nOs <- NROW(opened.pos)
  #nothing to do!
  if(!nOs && signals[d] == 'h') return (orders)
  #First lets check if we can open new positions
  #i)long positions
  if(signals[d] == 'b' && !nOs){
    quant <- round(bet*money/market[d, 'Close'], 0)
    print(quant)
    if(quant > 0)
      orders <- rbind(orders, data.frame(order = c(1, -1, -1),
                                         order.type = c(1, 2, 3),
                                         val = c(quant, 
                                                 market[d, 'Close']*
                                                   (1+exp.prof),
                                                 market[d, 'Close']*
                                                   (1 - max.loss)),
                                         action = c('open', 'close',
                                                    'close'),
                                         posID = c(NA, NA, NA)
                                         )
                      )
    #ii) short positions
  } else if (signals[d] == 's' && !nOs) {
    #This is the nr of stocks we already need to buy
    #because of currently opened short positions
    need2buy <- sum(opened.pos[opened.pos[, 'pos.type'] == -1, 
                               "N.stocks"])*market[d, 'Close']
    quant <- round(bet*(money-need2buy)/market[d, 'Close'], 0)
    if(quant > 0)
      orders <- rbind(orders,
                      data.frame(order = c(-1, 1, 1), 
                                 order.type = c(1, 2, 3),
                                 val = c(quant, market[d, 'Close']
                                         *(1-exp.prof),
                                         market[d, 'Close']*
                                           (1 + max.loss)),
                                 action = c('open', 'close', 
                                            'close'),
                                 posID = c(NA, NA, NA)
                                 )
                      )
  }
  #let's check if we need to close positions
  #because their holding time is over 
  if(nOs)
    for(i in 1:nOs) {
      if(d - opened.pos[i, 'Odate'] >= hold.time)
        orders <- rbind(orders,
                        data.frame(order = -opened.pos[i, 'pos.type'],
                                   order.type = 1,
                                   val = NA,
                                   action = 'close',
                                   posID = rownames(opened.pos)[i]
                                   )
                        )
        }
  orders
}
@

<<policy_2>>=
policy.2 <- function(signals, market, opened.pos, money,
                     bet = 0.2, exp.prof = 0.025, 
                     max.loss = 0.05) 
{
  d <- NROW(market) #this is the ID of today
  orders <- NULL
  nOs <- NROW(opened.pos)
  #nothing to do
  if(!nOs && signals[d] == 'h') return (orders)
  #First lets check if we can open new positions
  # i) long positions
  if (signals[d] == 'b'){
    quant <- round(bet*money/market[d, 'Close'], 0)
   # print(quant)
    if (quant > 0)
      orders <- rbind(orders, 
                      data.frame(order = c(1, -1, -1),
                                 order.type = c(1, 2, 3),
                                 val = c(quant,
                                         market[d, 'Close']*
                                           (1+exp.prof),
                                         market[d, 'Close']*
                                           (1-max.loss)
                                         ),
                                 action = c('open', 'close',
                                            'close'),
                                 posID = c(NA, NA, NA)
                                 )
                      )
  } else if (signals[d] == 's') {
    #this is the money already commited to buy stocks
    #because of currently opened short positions
    need2buy <- sum(opened.pos[opened.pos[, 'pos.type'] == -1, 
                               "N.stocks"])*market[d, 'Close']
    quant <- round(bet*(money - need2buy)/market[d, 'Close'], 0)
    if(quant >0)
      orders <- rbind(orders, 
                      data.frame(order = c(-1, 1, 1),
                                 order.type = c(1, 2, 3),
                                 val = c(quant,
                                         market[d, 'Close']*
                                           (1-exp.prof),
                                         market[d, 'Close']*
                                           (1 + max.loss)
                                         ),
                                 action = c('open', 'close', 'close'),
                                 posID = c(NA, NA, NA)
                                 )
                      )
  }
  orders
}
@
  <<train_test>>=
start <- 1
len.tr <- 1000
len.ts <- 500
tr <- start:(start+len.tr-1)
ts <- (start + len.tr):(start+len.tr+len.ts-1)
#generate the quotes for the testing period
data(GSPC)
date <- rownames(Tdata.train[start+len.tr, ])
market <- GSPC[paste(date, '/', sep = '')][1:len.ts]
#learining the model and obtaining its signal predictions
library(e1071)
s <- svm(Tform, Tdata.train[tr, ], cost = 10, gamma = 0.01)
p <- predict(s, Tdata.train[ts, ])
sig <- trading.signals(p, 0.1, -0.1)
#now using the simulated trader
t1 <- trading.simulator(market, sig, 'policy.1', 
                        list(exp.prof = 0.05, bet = 0.2,
                             hold.time = 30))
t1
summary(t1)
@

<<tradingEvaluation>>=
tradingEvaluation(t1)
@

我们可以得到根据我们的策略和相应的交易结果。
<<plot_tradeRecord_class, warning=FALSE>>=
plot(t1, market, theme = "white", name = "SP500")
@
<<example_policy_2>>=
t2 <- trading.simulator(market, sig, "policy.2", 
                        list(exp.prof = 0.05, bet = 0.3))
summary(t2)
@

可以发现，结果有好有坏。收益率有时为正，有时为负。
\subsection{训练集的不同位置进行模拟}
在预测过程中，当我们预测明天的指标变量，那么今天的交易信息就是已知的。我们将运用蒙特卡罗模拟得到稳定的估计。对训练集中的选定的时间~$r$~,用其气前10年的数据训练模型，后5年的数据去测试模型。我们将用蒙特卡罗模拟随机的得到时间点~$r$~，当然，~$r$~的选取是有条件限制的。如下图：
\begin{figure}[ht]
\centering
\includegraphics[width = 12cm, height = 5cm]{./moto.jpeg}
\caption{蒙特卡罗模拟的实验过程}
\end{figure}
<<another_police_2, warning=FALSE>>=
start <- 2000
len.tr <- 1000
len.ts <- 500
tr <- start:(start+len.tr - 1)
ts <- (start+len.tr):(start+len.tr+len.ts-1)
date <- rownames(Tdata.train[start+len.tr, ])
market <- GSPC[paste(date, '/', sep = "")][1:len.ts]
s <- svm(Tform, Tdata.train[tr, ], cost = 10, gamma = 0.01)
p <- predict(s, Tdata.train[ts, ])
sig <- trading.signals(p, 0.1, -0.1)
t2 <- trading.simulator(market, sig, "policy.2", list(exp.prof = 0.05,
                                                      bet = 0.3))
summary(t2)
plot(t2, market, theme = "white")
@
<<train+test+evaluate_cycle_function>>=
MC.svmR <- function(form, train, test, b.t = 0.1, 
                    s.t = -0.1, ...) {
  require(e1071)
  t<- svm(form, train, ...)
  p <- predict(t, test)
  trading.signals(p, b.t, s.t)
}
MC.svmC <- function(form, train, test, b.t = 0.1, 
                    s.t = -0.1,...) {
  require(e1071)
  tgtName <- all.vars(form)[1]
  train[, tgtName] <- trading.signsls(train[, tgtName],
                                      b.t, s.t)
  t <- svm(form, train)
  p <- predict(t, test)
  factor(p, levels = c("s", "h", "b"))
}
MC.nnetR <- function(form, train, test, b.t = 0.1, 
                     s.t = -0.1, ...) {
  require(nnet)
  t <- nnet(form, train, ...)
  p <- predict(t, test)
  trading.signals(p, b.t, s.t)
}
MC.nnetC <- function(form, train, test, b.t = 0.1,
                     s.t = 0.1, ...) {
  require(nnet)
  tgtName <- all.vars(form)[1]
  train[, tgtName] <- trading.singals(train[ , tgtName],
                                      b.t, s.t)
  t <- nnet(form, train, ...)
  p <- predict(t, test, type = "class")
  factor(p, levels = c("s", "h", "b"))
}
MC.earth <- function(form, train, test, b.t = 0.1,
                     s.t = -0.1, ...) {
  require(earth)
  t <- earth(form, train,...)
  p <- predict(t, test)
  trading.signals(p, b.t, s.t)
}
singleModel <- function(form, train, test, learner, policy.func,
                        ...){
  p <- do.call(paste("MC", learner, sep = "."), list(form, train, 
                                                     test, ...))
  eval.stats(form, train, test, p, policy.func = policy.func)
  }
grow <- function(form, train, test, learner, relearn.step, 
                 policy.func, ...) {
  real.learner <- learner(paste("MC", learner, sep = "."),
                           pars =list(...))
  p <- growingWindowTest(real.learner, form, train, test,
                         relearn.step)
  p <- factor(p, levels = 1:3, labels = c("s", "h", "b"))
  eval.stats(form, train, test, p, policy.func = policy.func)
  }
slide <- function(form, train, test, learner, relearn.step, 
                  policy.func, ...) {
  real.learner <- learner(paste("MC", learner, sep = "."),
                           pars =list(...))
  p <- slidingWindowTest(real.learner, form, train, test,
                         relearn.step)
  p <- factor(p, levels = 1:3, labels = c("s", "h", "b"))
  eval.stats(form, train, test, p, policy.func = policy.func)
}
@
<<eval.stats>>=
eval.stats <- function(form, train, test, preds, b.t = 0.1,
                       s.t = 0.1, ...) {
  #Signals evaluation
  tgtName <- all.vars(form)[1]
  test[, tgtName] <- trading.signals(test[ , tgtName], b.t,
                                     s.t)
  st <- sigs.PR(preds, test[, tgtName])
  dim(st) <- NULL
  names(st) <- paste(rep(c('prec', 'rec'), each = 3), 
                     c('s', 'b', 'sb'), sep = '.')
  
  #Trading evaluation 
  date <- rownames(test)[1]
  market <- GSPC[paste(date, "/", sep = '')][1:length(test), ]
  trade.res <- trading.simulator(market, preds, ...)
  c(st, tradingEvaluation(trade.res))
                       }
@
<<some_policy>>=
pol1 <- function(signals, market, op, money)
  policy.1(signals, market, op, money,
           bet = 0.2, exp.prof = 0.025, max.loss = 0.05, 
           hold.time = 10)
pol2 <- function(signals, market, op, money)
  policy.1(signals, market, op, money,
           bet = 0.2, exp.prof = 0.05, max.loss = 0.05,
           hold.time = 20)
pol3 <- function(signals, market, op, money)
  policy.2(signals, market, op, money,
           bet = 0.5, exp.prof = 0.05, max.loss = 0.05)

@
<<Model_evaluation, eval=FALSE>>=
# The list of learners we will use
TODO <- c('svmR','svmC','earth','nnetR','nnetC')

# The data sets used in the comparison
DSs <- list(dataset(Tform,Tdata.train,'test'))

# Monte Carlo (MC) settings used
MCsetts <- mcSettings(20,     # 20 repetitions of the MC exps
                      2540,   # ~ 10 years for training
                      1270,   # ~ 5 years for testing
                      1234)   # random number generator seed

# Variants to try for all learners
VARS <- list()
VARS$svmR   <- list(cost=c(10,150),gamma=c(0.01,0.001),
                    policy.func=c('pol1','pol2','pol3'))
VARS$svmC   <- list(cost=c(10,150),gamma=c(0.01,0.001),
                    policy.func=c('pol1','pol2','pol3'))
VARS$earth <- list(nk=c(10,17),degree=c(1,2),thresh=c(0.01,0.001),
                   policy.func=c('pol1','pol2','pol3'))
VARS$nnetR  <- list(linout=T,maxit=750,size=c(5,10),
                    decay=c(0.001,0.01),
                    policy.func=c('pol1','pol2','pol3'))
VARS$nnetC  <- list(maxit=750,size=c(5,10),decay=c(0.001,0.01),
                    policy.func=c('pol1','pol2','pol3'))

# main loop
for(td in TODO) {
  assign(td,
         experimentalComparison(
           DSs,         
           c(
             do.call('variants',
                     c(list('singleModel',learner=td),VARS[[td]],
                       varsRootName=paste('single',td,sep='.'))),
             do.call('variants',
                     c(list('slide',learner=td,
                            relearn.step=c(60,120)),
                       VARS[[td]],
                       varsRootName=paste('slide',td,sep='.'))),
             do.call('variants',
                     c(list('grow',learner=td,
                            relearn.step=c(60,120)),
                       VARS[[td]],
                       varsRootName=paste('grow',td,sep='.')))
             ),
            MCsetts)
         )

  # save the results
  save(list=td,file=paste(td,'Rdata',sep='.'))
}
@
<<load_result_data>>=
load("svmR.Rdata")
load("svmC.Rdata")
load("earth.Rdata")
load("nnetR.Rdata")
load("nnetC.Rdata")
@
我们通过对备选模型集合进行训练，选出稳定行最好的模型。主要通过以下指标进行选择

\textbullet 收益率

\textbullet 产生收益的交易占总交易数量百分比

\textbullet 交易判断准确性

\textbullet 最大损失

\textbullet 风险系数

<<rank>>=
tgtStats <- c('prec.sb', 'Ret', 'PercProf', 'MaxDD', 
              'SharpeRatio')
allSysRes <- join(subset(svmR, stats = tgtStats),
            subset(svmC, stats = tgtStats),
            subset(nnetR, stats = tgtStats),
            subset(nnetC, stats = tgtStats),
            subset(earth, stats = tgtStats),
            by = 'variants')
rankSystems(allSysRes, 5, maxs = c(T, T, T, F, T))
@

我们发现交易判断准确性为~$100\%$~，这一般是不可能的，我们发现，这是由于只产生了一笔交易。
<<a_close_inspection>>=
summary(subset(svmC, 
               stats = c('Ret', 'RetOverBH', 'PercProf', 'NTrades'),
               vars = c('slide.svmC.v5', 'slide.svmC.v6')))
@
我们进一步增加限制条件，选出稳定模型并进行比较分析。
<<some_contraints_on_statistics>>=
fullResults <- join(svmR, svmC, nnetR, nnetC, earth,
                    by = "variants")
nt <- statScores(fullResults, "NTrades")[[1]]
rt <- statScores(fullResults, "Ret")[[1]]
pp <- statScores(fullResults, "PercProf")[[1]]
s1 <- names(nt)[which(nt > 20)]
s2 <- names(rt)[which(rt > 0.5)]
s3 <- names(pp)[which(pp > 40)]
namesBest <- intersect(intersect(s1, s2), s3)
summary(subset(fullResults, stats = tgtStats, vars = namesBest))
@

<<compAnalysis, warning=FALSE>>=
compAnalysis(subset(fullResults, stats = tgtStats,
                   vars = namesBest))
@

对每一个模型，我们都进行了20次模拟。因此，我们对选出的模型的收益率，收益率交易比重，最大损失绘制箱形图。

<<comExp_plot, fig.height=8>>=
plot(subset(fullResults, stats = c('Ret', 'PercProf', 'MaxDD'),
            vars = namesBest))
@
<<getVariant>>=
getVariant("single.nnetR.v12", nnetR)
@
最终，我们用最后9年的数据进行测试
<<evaluation_of_systems_test_9year>>=
Tdata.train <- as.data.frame(modelData(data.model, data.window = 
                                         c('1970-01-02','1999-12-31')))
Tdata.eval <- na.omit(as.data.frame(modelData(data.model,
                                               c('2000-01-01',
                                                 '2009-09-15'))))
data <- tail(Tdata.train, 2540)
results <- list()
for(name in namesBest[2:3]) {
  sys <- getVariant(name, fullResults)
  results[[name]] <- runLearner(sys, Tform, data, Tdata.eval)
}
results <- t(as.data.frame(results))
results[, c("Ret", "RetOverBH", "MaxDD", "SharpeRatio", "NTrades",
            "PercProf")]
@

最终，我们列出最好的模型的性质记过
<<the_best_model_characteristics>>=
getVariant("slide.nnetR.v15", fullResults)
@

通过绘制交易图，观察模型表现
<<get_the_trading_record, warning=FALSE, results='hide'>>=
model <- learner("MC.nnetR", list(maxit = 759, linout = T,
                                  trace = F, size = 10,
                                  decay = 0.01))
preds <- growingWindowTest(model, Tform, data, Tdata.eval, 
                           relearn.step = 120)
signals <- factor(preds, levels = 1:3, labels = c("s", "h", "b"))
date <- rownames(Tdata.eval)[1]
market <- GSPC[paste(date, "/", sep = "")][1:length(signals), ]
trade.res <- trading.simulator(market, signals, policy.func = "pol2")

@
<<plot_trade.res, warning=FALSE>>=
plot(trade.res, market, theme = "white", name = "SP500-final test")
@

进一步得到相应的收益率，包括月收益率
<<PerformanceAnalytics, warning=FALSE, message=FALSE>>=
library(PerformanceAnalytics)
rets <- Return.calculate(trade.res@trading$Equity)
chart.CumReturns(rets, main = "Cumulative returns",
                 ylab = "returns")
#periodReturn(trade.res@trading$Equity, period = "yearly")
head(yearlyReturn(xts(trade.res@trading$Equity)))
plot(100*yearlyReturn(xts(trade.res@trading$Equity)), 
     main = "Yearly percentage returns")
abline(h = 0, lty = 2)
@
<<table.CalendarReturns>>=
table.CalendarReturns(xts(rets))
@
<<table.DownsideRisk>>=
table.DownsideRisk(xts(rets))
@

\newpage
\end{CJK*}
\end{document}




